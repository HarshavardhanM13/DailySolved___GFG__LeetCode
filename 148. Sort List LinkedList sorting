148. Sort List


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        return mergesort(head);
    }
    public ListNode getMiddleNode(ListNode head){
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    public ListNode mergetwo(ListNode left,ListNode right){
        ListNode newNode = new ListNode(-1);
        ListNode temp = newNode;
        while(left != null && right != null){
            if(left.val < right.val){
                temp.next = left;
                temp = left;
                left = left.next;
            }
            else{
                temp.next = right;
                temp  = right;
                right = right.next;
            }
        }
        if(left != null){
            temp.next = left;
        }
        else{
            temp.next = right;
        }
        return newNode.next;
    }
    public ListNode mergesort(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        ListNode mid = getMiddleNode(head);
        ListNode leftpart = head;
        ListNode rightpart = mid.next;
        mid.next = null;
        leftpart = mergesort(leftpart);
        rightpart = mergesort(rightpart);
        return mergetwo(leftpart,rightpart);
    }
}
