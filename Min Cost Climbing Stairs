Min Cost Climbing Stairs



//Back-end complete function Template for Java

class Solution {
    static int[] dp;
    static int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        dp = new int[n+1];
        Arrays.fill(dp,-1);
        return Math.min(backtrack(0,n,cost,0),backtrack(1,n,cost,0));
    }
    static int backtrack(int i,int n,int[] cost,int till){
        if(i>=n){
            return till;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int take = cost[i] + backtrack(i+1,n,cost, till);
        int not_take = cost[i] + backtrack(i+2,n,cost,till);
        dp[i] = Math.min(take,not_take);
        return dp[i];
    }
};
