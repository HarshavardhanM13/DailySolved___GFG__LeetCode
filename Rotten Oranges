


class Solution {
    public int orangesRotting(int[][] mat) {
        
        int n = mat.length;
        int m = mat[0].length;
        Queue<int[]> queue = new LinkedList<>();
        //queue.add(new int[]{0,0});
        int[][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
        int time = 0;
        int fresh = 0;
        for(int i = 0;i < n ;i++){
            for(int j = 0;j < m; j++){
                if(mat[i][j] == 1){
                    fresh++;
                }
                else if(mat[i][j] == 2){
                    queue.offer(new int[]{i,j});
                }
            }
        }
        
        
        while(!queue.isEmpty()){
            int len = queue.size();
            boolean rotted = false;
            for(int i = 0; i < len; i++){
                int[] curr = queue.poll();
                int x = curr[0], y = curr[1];
                for(int[] dir : directions){
                    int nx = x + dir[0], ny = y + dir[1];
                    if(nx < 0 || ny < 0 || nx >= n || ny >= m || mat[nx][ny] != 1){
                        continue;
                    }
                    fresh--;
                    mat[nx][ny] = 2;
                    queue.add(new int[]{nx,ny});
                    rotted = true;
                }
            }
            if(rotted){
                time++;
            }
        }
        return fresh == 0 ? time : -1;
    }
}
