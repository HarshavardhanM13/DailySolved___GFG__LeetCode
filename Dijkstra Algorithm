Dijkstra Algorithm




// User function Template for Java
class Solution {
    public int[] dijkstra(int V, int[][] edges, int src) {
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((x,y) -> x[0] - y[0]);
        int[] dist = new int[V];
        Arrays.fill(dist, (int) 1e9);
        
        List<List<int[]>> adj = new ArrayList<>();
        
        for(int i=0;i<=V;i++)
            adj.add(new ArrayList<>());
        
        for(int[] edge: edges){
            
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            
            adj.get(u).add(new int[]{u,w});
            adj.get(v).add(new int[]{u,w});
        }
        
        pq.offer(new int[]{0,src});
        dist[src] = 0;
        
        while(!pq.isEmpty()){
            int[] curr = pq.poll();
            int dis = curr[0];
            int node = curr[1];
            
            for(int[] neighbor : adj.get(node)){
                int edgeWeight = neighbor[1];
                int adjNode = neighbor[0];
                
                if(dis + edgeWeight < dist[adjNode]){
                    dist[adjNode] = dis + edgeWeight;
                    pq.offer(new int[]{dis + edgeWeight,adjNode});
                }
            }
        }
        
        return dist;
    }
}

