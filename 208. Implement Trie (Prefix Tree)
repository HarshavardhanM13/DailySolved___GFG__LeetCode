208. Implement Trie (Prefix Tree)



class TrieNode{
    boolean endsHere = false;
    HashMap<Character,TrieNode> childrens = new HashMap<>();
    TrieNode(){

    }
}

class Trie {

    TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    
    public void insert(String word) {
        TrieNode curr = root;

        for(char ch : word.toCharArray()){
            if(curr.childrens.getOrDefault(ch,null) == null){
                curr.childrens.put(ch,new TrieNode());
            }
            curr = curr.childrens.get(ch);
        }

        curr.endsHere = true;
    }
    
    public boolean search(String word) {
        TrieNode curr = root;

        for(char ch : word.toCharArray()){
            if(curr.childrens.getOrDefault(ch,null) == null){
                return false;
            }
            curr = curr.childrens.get(ch);
        }

        return curr.endsHere;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode curr = root;

        for(char ch : prefix.toCharArray()){
            if(curr.childrens.getOrDefault(ch,null) == null){
                return false;
            }
            curr = curr.childrens.get(ch);
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
