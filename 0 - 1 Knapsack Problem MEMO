0 - 1 Knapsack Problem MEMO




class Solution {
    static int[][] dp;

    static int knapsack(int W, int val[], int wt[]) {
        dp = new int[val.length][W + 1];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[i].length; j++) {
                dp[i][j] = -1;
            }
        }
        return backtrack(val.length - 1, W, val, wt);
    }

    static int backtrack(int ind, int w, int[] val, int[] wt) {
        if (ind == 0) {
            return (wt[0] <= w) ? val[0] : 0;
        }
        if (dp[ind][w] != -1) {
            return dp[ind][w];
        }
        int take = 0;
        if (wt[ind] <= w) {
            take = val[ind] + backtrack(ind - 1, w - wt[ind], val, wt);
        }
        int not_take = backtrack(ind - 1, w, val, wt);
        return dp[ind][w] = Math.max(take, not_take);
    }
}
