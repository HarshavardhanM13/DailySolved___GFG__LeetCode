212. Word Search II




class Trie:
    def __init__(self):
        self.childrens = {}
        self.isEnd = False
    
    def addWord(self,word):
        curr = self

        for ch in word:
            if ch not in curr.childrens:
                curr.childrens[ch] = Trie()
            curr = curr.childrens[ch]
        
        curr.isEnd = True


class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        
        root = Trie()
        for word in words:
            root.addWord(word)
        
        def dfs(row,col,word,node):
            if row<0 or col<0 or row>=len(board) or col>=len(board[row]) or (row,col) in visited or board[row][col] not in node.childrens:
                return 
            visited.add((row,col))
            node = node.childrens[board[row][col]]
            word += board[row][col]
            if node.isEnd:
                result.add(word)
            left = dfs(row,col-1,word,node)
            right = dfs(row,col+1,word,node)
            down = dfs(row+1,col,word,node)
            top = dfs(row-1,col,word,node)
            visited.remove((row,col))
            return 


        result = set()
        visited = set()
        for row_ind,row in enumerate(board):
            for col_ind,col in enumerate(row):
                dfs(row_ind,col_ind,"",root)
        
        return list(result)
        
