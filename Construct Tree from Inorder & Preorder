Construct Tree from Inorder & Preorder



/*
class Node {
    int data;
    Node left, right;

    Node(int key) {
        data = key;
        left = right = null;
    }
}
*/

class Solution {
    
    public static Node buildTree(int inorder[], int preorder[]) {
        int n = preorder.length;
        int[] preInd = {0};
        return buildTree(preorder,inorder,preInd,0,n-1);
    }
    static Node buildTree(int[] preorder,int[] inorder,int[] preInd,int left,int right){
        if(left > right){
            return null;
        }
        int rootElem = findRootElemInd(inorder,preorder[preInd[0]],left,right);
        preInd[0]++;
        
        Node root = new Node(inorder[rootElem]);
        root.left = buildTree(preorder,inorder,preInd,left,rootElem - 1);
        root.right = buildTree(preorder,inorder,preInd,rootElem + 1,right);
        
        return root;
    }
    static int findRootElemInd(int[] inorder,int rootElem,int left,int right){
        for(int i=left;i<=right;i++){
            if(inorder[i] == rootElem){
                return i;
            }
        }
        return -1;
    }
}
