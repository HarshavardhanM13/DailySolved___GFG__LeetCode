86. Partition List



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head == null){
            return head;
        }
        
        ListNode lessThanX = new ListNode(-1);
        ListNode otherwise = new ListNode(-1);
        ListNode temp1 = lessThanX;
        ListNode temp2 = otherwise;

        while(head != null){
            if(head.val < x){
                temp1.next = head;
                temp1 = head;
                head = head.next;
                temp1.next = null;
            }
            else{
                temp2.next = head;
                temp2 = head;
                head = head.next;
                temp2.next = null;
            }
            
        }
        temp1.next = otherwise.next;
        temp2.next = null;
        return lessThanX.next;
    }
}
