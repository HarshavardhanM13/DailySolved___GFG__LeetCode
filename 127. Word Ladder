127. Word Ladder



class Pair{
    int length;
    String word;
    Pair(String word,int length){
        this.word = word;
        this.length = length;
    }
}



class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(beginWord,1));
        Set<String> wordDict = new HashSet<>();
        for(String s : wordList){
            wordDict.add(s);
        }

        while(!queue.isEmpty()){
            Pair curr = queue.poll();
            if(curr.word.equals(endWord)){
                return curr.length;
            }
            for(int i=0;i<curr.word.length();i++){
                char[] curr_str_word = curr.word.toCharArray();
                for(char ch = 'a' ;ch<='z';ch++){
                    curr_str_word[i] = ch;
                    String temp = new String(curr_str_word);
                    if(wordDict.contains(temp)){
                        queue.add(new Pair(temp,curr.length + 1));
                        wordDict.remove(temp);
                    }
                }
            }
        }
        return 0;
    }
}
