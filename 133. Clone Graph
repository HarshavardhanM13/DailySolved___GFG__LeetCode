
133. Clone Graph



"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        
        if not node:
            return node
        
        q = [node]
        cloned = {}
        cloned[node.val] = Node(node.val)

        while q:
            elem = q.pop()
            for neighbor in elem.neighbors:
                if neighbor.val not in cloned:
                    cloned[neighbor.val] = Node(neighbor.val)
                    q.append(neighbor)
                cloned[elem.val].neighbors.append(cloned[neighbor.val])
        return cloned[node.val]
