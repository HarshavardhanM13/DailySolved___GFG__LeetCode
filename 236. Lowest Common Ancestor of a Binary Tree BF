236. Lowest Common Ancestor of a Binary Tree BF



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> al1 = new ArrayList<>();
        ArrayList<TreeNode> al2 = new ArrayList<>();
        path(p,root,al1,new ArrayList<>());
        path(q,root,al2,new ArrayList<>());
        //System.out.println(al1);
       // System.out.println(al2);
        TreeNode ans = null;
        for(int i = 0;i<Math.min(al1.size(),al2.size());i++){
            if(al1.get(i) == al2.get(i)){
                ans = al1.get(i);
            }
        }
        return ans;
    }

    public void path(TreeNode target,TreeNode root,List<TreeNode> al,List<TreeNode> curr_path){
        if(root == null){
            return;
        }
        curr_path.add(root);
        if(root == target){
            for(TreeNode node : curr_path){
                al.add(node);
            }
            return;
        }
        
        path(target,root.left,al,curr_path);
        path(target,root.right,al,curr_path);
        curr_path.remove(curr_path.size() - 1);
    }

}
