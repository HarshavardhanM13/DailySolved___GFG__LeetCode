173. Binary Search Tree Iterator


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: Optional[TreeNode]):
        self.root = root
        self.inorder = []
        self.curr = 0
        self.inorderTraversal(root)
        #print(self.inorder)
    def inorderTraversal(self,root):
        if not root:
            return 
        self.inorderTraversal(root.left)
        self.inorder.append(root.val)
        self.inorderTraversal(root.right)

    def next(self) -> int:
        val =  self.inorder[self.curr]
        self.curr += 1
        return val

    def hasNext(self) -> bool:
        return True if self.curr < len(self.inorder) else False


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
