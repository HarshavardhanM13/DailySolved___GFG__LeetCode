146. LRU Cache



class Node{
    int key;
    int val;
    Node next = null;
    Node prev = null;
    Node(int key,int val){
        this.key = key;
        this.val = val;
    }
}

class LRUCache {
    
    int capacity = 0;
    Map<Integer,Node> hm = new HashMap<>();
    Node head = new Node(-1,-1);
    Node tail = new Node(-1,-1);

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(hm.containsKey(key)){
            Node curr = hm.get(key);
            deleteNode(curr);
            insertAfterHead(curr);
            return curr.val;
        }    
        else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if(hm.containsKey(key)){
            Node curr = hm.get(key);
            deleteNode(curr);
            curr.val = value;
            insertAfterHead(curr);
        }   
        else{
            if(hm.size() == capacity){
                Node curr = tail.prev;
                hm.remove(curr.key);
                deleteNode(curr);
            }
            Node node = new Node(key,value);
            insertAfterHead(node);
            hm.put(key,node);
        }
    }

    public void insertAfterHead(Node node){
        node.next = head.next;
        head.next.prev = node;
        node.prev = head;
        head.next = node;
    }

    public void deleteNode(Node node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }   
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
