
103. Binary Tree Zigzag Level Order Traversal


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> level_order = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        if(root == null){
            return level_order;
        }
        queue.add(root);
        int toggle = 0;
        while(!queue.isEmpty()){
            int len = queue.size();
            List<Integer> al = new ArrayList<>();
            for(int i = 0;i<len;i++){
                root = queue.poll();
                al.add(root.val);
                if(root.left != null){
                    queue.add(root.left);
                }
                if(root.right != null){
                    queue.add(root.right);
                }
            }
            if(toggle == 1){
                Collections.reverse(al);
                level_order.add(al);
                toggle = 0;
            }
            else{
                level_order.add(al);
                toggle = 1;
            }
            
        }
        return level_order;
    }
}
