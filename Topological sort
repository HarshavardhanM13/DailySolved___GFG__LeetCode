Topological sort

class Solution {
    // Function to return list containing vertices in Topological order.
    
    
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> al = new ArrayList<>();
        Set<Integer> visited = new HashSet<>();
        Stack<Integer> stack = new Stack<>();
        for(int i=0;i<adj.size();i++){
            if(!visited.contains(i))
                dfs(adj,i,visited,stack);
        }
        while(!stack.isEmpty()){
            al.add(stack.pop());
        }
        return al;
    }
    
    static public void dfs(ArrayList<ArrayList<Integer>> adj,int curr,Set<Integer> visited,Stack<Integer> stack){
        visited.add(curr);
        for(int adjnode : adj.get(curr)){
            if(!visited.contains(adjnode)){
                dfs(adj,adjnode,visited,stack);
            }
        }
        stack.push(curr);
    }
}
